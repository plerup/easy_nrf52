#!/usr/bin/env perl
#====================================================================================
# install
#
# Installation script for easy_nrf52
#
# This file is part of easy_nrf52
# License: LGPL 2.1
# General and full license information is available at:
#    https://github.com/plerup/easy_nrf52
#
# Copyright (c) 2022-2024 Peter Lerup. All rights reserved.
#
#====================================================================================

use strict;

use File::Basename;
use Cwd 'abs_path';

my $env_name = "easy_nrf52";
my $this_dir = dirname(abs_path(__FILE__));
my $bin_dir = "/usr/local/bin";
my $py_env_dir;

my $gcc_version = "gcc-arm-none-eabi-10.3-2021.10";
my @tool_list = (
"https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/$gcc_version-x86_64-linux.tar.bz2",
"https://www.nordicsemi.com/-/media/Software-and-other-downloads/Desktop-software/nRF-command-line-tools/sw/Versions-10-x-x/10-15-4/nrf-command-line-tools_10.15.4_amd64.deb",
);

sub prompt {
  my ($mess, $def) = @_;
  print $mess, " [$def]: ";
  my $resp = <STDIN>;
  $resp =~ s/\s*$//;
  return $resp || $def;
}

#--------------------------------------------------------------------

sub find_sdk {
  my ($vers) = @_;
  my $main_ver = $1 if $vers =~ /^(\d+)/;
  die "Invalid version: $vers\n" unless $main_ver;
  my $url = "https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v$main_ver.x.x/";
  my $list = `wget -O - $url 2>/dev/null`;
  my $zip;
  while ($list =~ s/href\=\"(nRF5_SDK_$vers\S+.zip)\"//m) {
    $zip = "$url$1" unless $1 =~ /_doc/;
  }
  die "Unable to find version $vers\n" unless $zip;
  return $zip;
}

#--------------------------------------------------------------------

sub command {
  #print "* @_\n";
  `@_`;
  die "\n" if $@;
}

#--------------------------------------------------------------------

sub mk_dir {
  command("mkdir -p @_");
}

#--------------------------------------------------------------------

sub download {
  my ($url, $dst_dir) = @_;
  my $name = basename($url);
  my $dst = "$dst_dir/$name";
  print "  $name\n";
  return if -f $dst;
  command("wget -q \"$url\" -O \"$dst\"") unless -f $dst;
}

#--------------------------------------------------------------------

sub string_to_file {
  my $f;
  open($f, ">$_[0]") || return 0;
  print $f $_[1];
  close($f);
  return 1;
}

#--------------------------------------------------------------------

sub file_to_string {
  local($/);
  my $f;
  open($f, $_[0]) || return "";
  my $res = <$f>;
  close($f);
  return $res;
}

#--------------------------------------------------------------------

sub create_command {
  my $dst = "$bin_dir/$_[0]";
  command("sudo rm $dst") if -e $dst;
  if ($_[1]) {
    command("sudo sh -c 'echo $py_env_dir/bin/python3 $this_dir/tools/$_[0] \"\$\@\" >$dst'");
    command("sudo chmod +x $dst");
  } else {
    command("sudo ln -s -f $this_dir/tools/$_[0] $dst");
  }
}

#--------------------------------------------------------------------

print "==== Installing required tools for easy_nrf52 ====\n";
print "Admin rights are required\n";
command("sudo echo");

my $install_root = prompt("Installation root directory", "$ENV{'HOME'}/.$env_name");
my $sdk_list = prompt("Nordic SDK version(s)", "15 17");
my $nrfutil = "$install_root/nrfutil";

$py_env_dir = "$install_root/python_env";

my %sdks;
print "Validating SDKs...\n";
foreach (split(/\s+/, $sdk_list)) {
  $sdks{$_} = find_sdk($_), "\n";
}
my @sdk_names = sort keys %sdks;
my $def_sdk;
do {
  $def_sdk = prompt("Select default SDK", $sdk_names[0]);
} while (!$sdks{$def_sdk});

my $setup_dir = $install_root . "/setup";
mk_dir($setup_dir);
print "Downloading SDK(s) and tools...\n";
foreach (@sdk_names) {
  download($sdks{$_}, $setup_dir);
}
foreach (@tool_list) {
  download($_, $setup_dir);
}
print "Unpacking...\n";
foreach (glob("$setup_dir/*")) {
  if (/nRF5_SDK/) {
    /([^\/]+)\.zip/;
    my $dir = "$install_root/$1";
    print "  $1\n";
    command("rm -rf $dir") if -d $dir;
    command("unzip -q -o -d $install_root $_");
    # Patch the common makefiles in order to make them use the gcc installed here
    my $mk_file = "$dir/components/toolchain/gcc/Makefile.posix";
    my $txt = file_to_string($mk_file);
    $txt =~ s/(GNU_INSTALL_ROOT \S=).+/$1 $install_root\/$gcc_version\/bin\//;
    string_to_file($mk_file, $txt);
    $mk_file = "$dir/components/toolchain/gcc/Makefile.common";
    $txt = file_to_string($mk_file);
    $txt =~ s/mkdir/mkdir -p/;
    string_to_file($mk_file, $txt);
  } elsif (/gcc-arm/) {
    /(.+)\.bz/;
    my $tar = $1;
    print "  ", basename($tar), "\n";
    command("rm -rf $install_root/gcc-arm*");
    command("bunzip2 -k $_");
    command("tar -xf $tar -C $install_root");
    command("rm $tar");
  }
}

print "Installing...\n";
print "  System tools\n";
command("sudo apt update -qq -y >/dev/null 2>&1");
command("sudo dpkg -i $setup_dir/*.deb >/dev/null");
command("sudo apt install python3 python3-pip python3-venv ccache srecord openocd libzip-dev stlink-tools curl libncurses5* -qq -y >/dev/null 2>&1");
command("sudo usermod -a -G dialout $ENV{'USER'}");
print"  Python requirements\n";
command("python3 -m venv $py_env_dir");
command("$py_env_dir/bin/pip -qq install pyserial bleak");
print "  Nordic tools\n";
command("curl -s https://files.nordicsemi.com/artifactory/swtools/external/nrfutil/executables/x86_64-unknown-linux-gnu/nrfutil " .
        "-o $nrfutil");
command("chmod +x $nrfutil");
command("$nrfutil install -f device nrf5sdk-tools 2>/dev/null");
if (!`which JLinkConfig`) {
  my $jlink_deb = "/tmp/JLink_Linux_x86_64.deb";
  command("curl -s -X POST https://www.segger.com/downloads/jlink/JLink_Linux_x86_64.deb " .
    "-H \"Content-Type: application/x-www-form-urlencoded\" " .
    "-d \"accept_license_agreement=accepted\" -o $jlink_deb");
  command("sudo apt install $jlink_deb -qq -y >/dev/null 2>&1");
}
if (`which code`) {
  command("code --install-extension marus25.cortex-debug >/dev/null")
}
# Fix for Ubuntu 22.04 which does not have libzip 5
my $libzip_dir = "/usr/lib/x86_64-linux-gnu";
if (!-e "$libzip_dir/libzip.so.5" && -e "$libzip_dir/libzip.so.4") {
  command("sudo ln -sf $libzip_dir/libzip.so.4 $libzip_dir/libzip.so.5");
}
print"  Creating command line commands\n";
create_command("enrfmake");
create_command("enrfuart");
create_command("eenrfuart", 1);
create_command("enrfpath");
create_command("enrfscan", 1);
create_command("eenrfscan", 1);
my $def_priv_key = "$this_dir/bootloader/dev_priv_key.pem";
my $nrfutil_cmd = "$nrfutil nrf5sdk-tools";
command("$nrfutil_cmd keys generate $def_priv_key") unless -f $def_priv_key;
my $conf_dir = "$ENV{'HOME'}/.config/$env_name";
mk_dir($conf_dir);
string_to_file("$conf_dir/install",
  "# $env_name installation information\n" .
  "INSTALL_ROOT = $install_root\n" .
  "SDK_VERSION = $def_sdk\n" .
  "PATH := $py_env_dir/bin:\$(PATH)\n" .
  "NRFUTIL = $nrfutil_cmd\n");

print "\n";
print "==== Installation completed ==== \n";


